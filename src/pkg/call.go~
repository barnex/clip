package clip


import (
	"os"
	"reflect"
)


// Represents a call sent through RPC.
type Call struct {
	Args     []string  // CLI args (e.g. "play jazz")
	respChan chan Resp // send response here
}

// Response to a call.
type Resp struct {
	Resp string   // Response to user (e.g. "playing jazz")
	Err  os.Error // Error to user (e.g. "jazz not found")
}

func NewCall(args []string) Call {
	return Call{args, make(chan Resp)}
}


// Parse and execute call, return response.
func (call *Call) Exec() (resp Resp) {
	args := call.Args

	if len(args) == 0 {
		args = []string{""}
	}
	cmd := args[0]
	args = args[1:]
	Debug("player.call", cmd, args)

	p := reflect.ValueOf(player)
	m := p.MethodByName(cmd)
	Debug("MethodByName", cmd, ":", m)
	r := m.Call([]reflect.Value{reflect.ValueOf(args)})
	resp.Resp = r[0].Interface().(string)
	resp.Err = os.NewError(r[1].Interface().(string))

	return
}
